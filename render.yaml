services:
  - type: web
    name: bridge-gad
    env: python
    plan: free
    pythonVersion: "3.12"
    buildCommand: |
      # Enable verbose output and error handling
      set -ex
      
      # Print environment information
      echo "=== System Information ==="
      uname -a
      lsb_release -a 2>/dev/null || echo "lsb_release not available"
      echo "Python version: $(python3 --version 2>&1)"
      echo "Python path: $(which python3)"
      
      # Ensure we're using bash for better script compatibility
      SHELL=/bin/bash
      export SHELL
      
      # Create and activate virtual environment
      echo "=== Setting up Python 3.12 virtual environment ==="
      python3.12 -m venv venv
      source venv/bin/activate
      
      # Print Python and pip versions
      echo "Python version in venv: $(python --version)"
      echo "Pip version: $(pip --version)"
      
      # Install system dependencies with retries and verification
      echo "=== Installing system dependencies ==="
      for i in {1..3}; do
          echo "Attempt $i: Updating package lists..."
          apt-get update -q && {
              echo "Installing build essentials and cmake..."
              apt-get install -y --no-install-recommends \
                  build-essential \
                  cmake \
                  g++ \
                  make \
                  pkg-config \
                  && break
          } || echo "Attempt $i failed, retrying..."
          sleep 5
      done
      
      # Install additional required libraries
      apt-get install -y --no-install-recommends \
          libarrow-dev \
          zlib1g-dev \
          libssl-dev \
          liblz4-dev \
          libzstd-dev \
          libbz2-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libboost-regex-dev \
          python3-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          libopenblas-dev
      
      # Verify cmake installation
      echo "=== Verifying cmake installation ==="
      which cmake || echo "cmake not found in PATH"
      cmake --version || echo "cmake version check failed"
      
      # Upgrade pip and setuptools
      echo "=== Upgrading pip and setuptools ==="
      python -m pip install --upgrade pip setuptools wheel
      
      # Install core dependencies one by one with error handling
      echo "=== Installing core dependencies ==="
      for pkg in \
        "pygments==2.19.2" \
        "markdown-it-py==3.0.0" \
        "rich==14.0.0"; do
        echo "Installing $pkg..."
        python -m pip install --no-cache-dir "$pkg" || echo "Warning: Failed to install $pkg"
      done
      
      # Install pyarrow with prebuilt wheels
      echo "=== Installing pyarrow ==="
      # First, try with manylinux2014 wheels which are more compatible
      PYARROW_WITH_PARQUET=1 \
      PYARROW_WITH_DATASET=1 \
      PYARROW_WITH_CSV=1 \
      PYARROW_WITH_JSON=1 \
      python -m pip install --only-binary :all: --no-cache-dir \
          --index-url https://pypi.org/simple/ \
          pyarrow==15.0.2 || {
              
        echo "=== PyArrow installation with prebuilt wheels failed. Trying alternative installation method... ==="
        # Build from source as last resort
        echo "Building pyarrow from source..."
        apt-get install -y \
            libboost-all-dev \
            libbrotli-dev \
            libsnappy-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            libdouble-conversion-dev \
            liblz4-dev \
            libzstd-dev \
            libssl-dev \
            libz-dev \
            libbz2-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libwebp-dev \
            libopenblas-dev \
            ninja-build \
            pkg-config \
            git
            
        # Install specific cmake version if needed
        if ! command -v cmake || [[ $(cmake --version | head -1 | cut -d' ' -f3) < "3.16" ]]; then
            echo "Installing newer cmake..."
            wget -qO- https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh > cmake-install.sh \
                && chmod +x cmake-install.sh \
                && ./cmake-install.sh --skip-license --prefix=/usr/local \
                && rm cmake-install.sh
        fi
        
        # Verify cmake is available
        which cmake
        cmake --version
        
        # Install pyarrow from source
        PYARROW_WITH_PARQUET=1 \
        PYARROW_WITH_DATASET=1 \
        PYARROW_WITH_CSV=1 \
        PYARROW_WITH_JSON=1 \
        python -m pip install --no-cache-dir \
            --no-binary :all: \
            --verbose \
            pyarrow==15.0.2
      }
      
      # Install the rest of the requirements
      echo "=== Installing project requirements ==="
      python -m pip install --no-cache-dir -r requirements.txt
      
      # Verify critical installations
      echo "=== Verifying installations ==="
      python -c "
      import sys
      print(f'Python {sys.version}')
      
      try:
          import pyarrow
          print(f'PyArrow version: {pyarrow.__version__}')
      except ImportError as e:
          print(f'PyArrow import failed: {e}')
          sys.exit(1)
      
      try:
          import pandas as pd
          print(f'Pandas version: {pd.__version__}')
      except ImportError as e:
          print(f'Pandas import failed: {e}')
      
      try:
          import streamlit as st
          print(f'Streamlit version: {st.__version__}')
      except ImportError as e:
          print(f'Streamlit import failed: {e}')
      
      print('\nAll critical imports succeeded!')
      "
      
      echo "=== Build completed successfully ==="
    startCommand: "python app.py"
